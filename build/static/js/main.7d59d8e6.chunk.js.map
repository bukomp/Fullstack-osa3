{"version":3,"sources":["components/Numbers.js","components/Filter.js","components/ErrorMessage.js","components/NewPerson.js","components/ServerCall.js","App.js","serviceWorker.js","index.js"],"names":["Numbers","props","tempArr","newFilter","undefined","personData","forEach","person","name","includes","push","react_default","a","createElement","key","concat","number","id","onClick","onDelete","Filter","value","onChange","ErrorMessage","styles","margin","padding","backgroundColor","color","border","style","height","data","show","error","setTimeout","hideError","message","NewPerson","onSubmit","handleSubmit","nameName","nameValue","nameOnChange","numName","numValue","numOnChange","type","url","get","axios","App","_useState","useState","_useState2","Object","slicedToArray","setFilter","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","newMessage","setMessage","_useState9","_useState10","persons","setPersons","useEffect","then","r","showMessage","handleChange","e","target","console","log","addNewPerson","newPerson","post","Array","from","catch","updatePerson","num","put","deletePerson","delete","Fragment","components_ErrorMessage","components_Filter","components_NewPerson","preventDefault","find","window","confirm","components_Numbers","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MA4CeA,EA1CC,SAACC,GAGf,IAAMC,EAAU,GAkChB,MA7B0B,KAApBD,EAAME,gBAAwCC,IAApBH,EAAME,WAA+C,OAApBF,EAAME,UACnEF,EAAMI,WAAWC,QAAQ,SAAAC,GACnBA,EAAOC,KAAKC,SAASR,EAAME,YAAYD,EAAQQ,KACjDC,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAOC,MACfG,EAAAC,EAAAC,cAAA,cAAAE,OACMR,EAAOC,KADb,KAAAO,OACqBR,EAAOS,SAE5BL,EAAAC,EAAAC,cAAA,UAAQI,GAAIV,EAAOU,GAAIT,KAAM,SAAUU,QAASjB,EAAMkB,UAAtD,cAQNlB,EAAMI,WAAWC,QAAQ,SAAAC,GACvBL,EAAQQ,KACNC,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAOC,MACfG,EAAAC,EAAAC,cAAA,cAAAE,OACMR,EAAOC,KADb,KAAAO,OACqBR,EAAOS,SAE5BL,EAAAC,EAAAC,cAAA,UAAQI,GAAIV,EAAOU,GAAIT,KAAM,SAAUU,QAASjB,EAAMkB,UAAtD,cASNjB,GCzBSkB,EAbA,SAACnB,GACd,OACEU,EAAAC,EAAAC,cAAA,+BAEEF,EAAAC,EAAAC,cAAA,SACEL,KAAMP,EAAMO,KACZa,MAAOpB,EAAMoB,MACbC,SAAUrB,EAAMqB,aCsCTC,EA7CM,SAACtB,GAGpB,IAAMuB,EACG,CACLC,OAAQ,OACRC,QAAS,OACTC,gBAAiB,UACjBC,MAAO,UACPC,OAAQ,wBANNL,EAOA,CACFC,OAAQ,OACRC,QAAS,OACTC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,sBAQRC,EANI,CACJC,OAAQ,UACRH,MAAO,eAmBX,OAZG3B,EAAM+B,KAAKC,OAEVH,EADE7B,EAAM+B,KAAKE,MACLV,EAEAA,EAEVW,WAAW,WACTlC,EAAMmC,aACL,MAKHzB,EAAAC,EAAAC,cAAA,OAAKiB,MAAOA,GACT7B,EAAM+B,KAAKK,UCdHC,EA1BG,SAACrC,GACjB,OACEU,EAAAC,EAAAC,cAAA,QACE0B,SAAUtC,EAAMuC,cAEhB7B,EAAAC,EAAAC,cAAA,mBAEEF,EAAAC,EAAAC,cAAA,SACEL,KAAMP,EAAMwC,SACZpB,MAAOpB,EAAMyC,UACbpB,SAAUrB,EAAM0C,gBAGpBhC,EAAAC,EAAAC,cAAA,qBACEF,EAAAC,EAAAC,cAAA,SACEL,KAAMP,EAAM2C,QACZvB,MAAOpB,EAAM4C,SACbvB,SAAUrB,EAAM6C,eAEpBnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQkC,KAAK,UAAb,0BCpBFC,EAAM,eAMNC,EAAM,WACV,OAAOC,IAAMD,IAAID,IC8JJG,EA/JH,WAAM,IAAAC,EAEiBC,mBAAS,IAF1BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAERjD,EAFQmD,EAAA,GAEGG,EAFHH,EAAA,GAAAI,EAGgBL,mBAAS,IAHzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGRE,EAHQD,EAAA,GAGCE,EAHDF,EAAA,GAAAG,EAIoBT,mBAAS,IAJ7BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAIRE,EAJQD,EAAA,GAIGE,EAJHF,EAAA,GAAAG,EAKkBb,mBAAS,CACzCnB,OAAO,EACPD,MAAM,EACNI,QAAQ,KARM8B,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAKRE,EALQD,EAAA,GAKIE,EALJF,EAAA,GAAAG,EAUejB,mBAAS,IAVxBkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAURE,EAVQD,EAAA,GAUCE,EAVDF,EAAA,GAYhBG,oBAAU,WACRzB,IAAM0B,KAAK,SAAAC,GACTH,EAAWG,EAAE5C,SAEd,IAEH,IAQM6C,EAAc,SAAC3C,EAAOG,GAC1BgC,EAAW,CAACnC,MAAMA,EAAOD,MAAK,EAAMI,QAAQA,KAGxCyC,EAAe,SAACC,GACpB,OAAQA,EAAEC,OAAOxE,MACf,IAAK,OACHqD,EAAWkB,EAAEC,OAAO3D,OACpB,MACF,IAAK,SACH4C,EAAac,EAAEC,OAAO3D,OACtB,MACF,IAAK,SACHoC,EAAUsB,EAAEC,OAAO3D,OACnB,MACF,QACE4D,QAAQC,IAAI,qCAKZC,EAAe,WACnB,IDpDUnD,ECoDJoD,EAAY,CAAC5E,KAAKoD,EAAS5C,OAAQgD,IDpD/BhC,ECqDLoD,EDpDAlC,IAAMmC,KAAKrC,EAAKhB,ICqDlB2C,KAAK,SAAAC,GACJ,IAAM1E,EAAUoF,MAAMC,KAAKf,GAC3BtE,EAAQQ,KAAK0E,GACbH,QAAQC,IAAIhF,GACZuE,EAAWvE,GACX2D,EAAW,IACXI,EAAa,IACbY,GAAY,EAAD,GAAA9D,OAAW6C,EAAX,mCAEZ4B,MAAM,SAAAT,GACLE,QAAQC,IAAIH,GACZF,GAAY,EAAD,GAAA9D,OAAU6C,EAAV,iCAAA7C,OAAiDgE,OAI5DU,EAAe,WACnBjB,EAAQlE,QAAQ,SAAAC,GD1DR,IAACmF,EAAK1D,EC2DRzB,EAAOC,OAASoD,ID3Db8B,EC4DDnF,EAAOU,GD5DDe,EC4DK,CAACxB,KAAMD,EAAOC,KAAMQ,OAAQgD,GD3D1Cd,IAAMyC,IAAI3C,EAAI,IAAI0C,EAAK1D,IC4DrB2C,KAAK,SAAAC,GACJ3B,IACG0B,KAAK,SAAAC,GACJH,EAAWG,EAAE5C,KAAKA,MAClB6C,GAAY,EAAD,GAAA9D,OAAW6C,EAAX,qCAEZ4B,MAAM,SAAAT,GACLF,GAAY,EAAD,GAAA9D,OAAU6C,EAAV,0EAAA7C,OAA0FgE,QAG1GS,MAAM,SAAAT,GACLF,GAAY,EAAD,GAAA9D,OAAU6C,EAAV,kCAAA7C,OAAkDgE,SAMjEa,EAAe,SAAC3E,GDlFL,IAACe,KCmFLf,EDlFNiC,IAAM2C,OAAO7C,EAAI,IAAIhB,ICkFX2C,KAAK,SAAAC,GAClB3B,IACG0B,KAAK,SAAAC,GACJH,EAAWG,EAAE5C,KAAKA,MAClB6C,GAAY,EAAD,GAAA9D,OAAW6C,EAAX,qCAEZ4B,MAAM,SAAAT,QAGRS,MAAM,SAAAT,GACLF,GAAY,EAAD,GAAA9D,OAAU6C,EAAV,kCAAA7C,OAAkDgE,OAoBnE,OACEpE,EAAAC,EAAAC,cAACF,EAAAC,EAAMkF,SAAP,KAEEnF,EAAAC,EAAAC,cAACkF,EAAD,CACE/D,KAAMoC,EACNhC,UAxGY,WAChBiC,EAAW,CACTnC,OAAO,EACPD,MAAM,EACNI,QAAQ,QAwGR1B,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAACmF,EAAD,CACExF,KAAM,SACNa,MAAOlB,EACPmB,SAAUwD,IAGZnE,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAACoF,EAAD,CACExD,SAAU,OACVC,UAAWkB,EACXjB,aAAcmC,EAEdlC,QAAS,SACTC,SAAUmB,EACVlB,YAAagC,EAEbtC,aA5Ce,SAACuC,GACpBA,EAAEmB,iBAEG1B,EAAQ2B,KAAK,SAAC5F,GAAY,OAAOA,EAAOC,OAASoD,IAE5CwC,OAAOC,QAAP,GAAAtF,OAAkB6C,EAAlB,gDACR6B,IAFAN,OA2CAxE,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACyF,EAAD,CACEnF,SAvCe,SAAC4D,GACpB,IAAM9D,EAAK8D,EAAEC,OAAO/D,GAEjBmF,OAAOC,QAAQ,kDAAiDT,EAAa3E,IAqC5EZ,WAAYmE,EACZrE,UAAWA,MCpJCoG,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.7d59d8e6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Numbers = (props) => {\r\n\r\n\r\n  const tempArr = [];\r\n\r\n\r\n\r\n\r\n    if (props.newFilter !== '' && props.newFilter !== undefined && props.newFilter !== null) {\r\n      props.personData.forEach(person => {\r\n        if (person.name.includes(props.newFilter)) tempArr.push(\r\n          <div key={person.name}>\r\n            <div>\r\n              {`${person.name} ${person.number}`}\r\n            </div>\r\n            <button id={person.id} name={\"delete\"} onClick={props.onDelete}>\r\n              delete\r\n            </button>\r\n          </div>\r\n\r\n        );\r\n      })\r\n    } else {\r\n      props.personData.forEach(person => {\r\n        tempArr.push(\r\n          <div key={person.name}>\r\n            <div>\r\n              {`${person.name} ${person.number}`}\r\n            </div>\r\n            <button id={person.id} name={\"delete\"} onClick={props.onDelete}>\r\n              delete\r\n            </button>\r\n          </div>\r\n        );\r\n      })\r\n    }\r\n\r\n  return(\r\n      tempArr\r\n  );\r\n};\r\n\r\nexport default Numbers;","import React from \"react\";\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <div>\r\n      filter shown with\r\n      <input\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst ErrorMessage = (props) => {\r\n\r\n\r\n  const styles = {\r\n    error: {\r\n      margin: '1rem',\r\n      padding: '1rem',\r\n      backgroundColor: '#F48A8A',\r\n      color: '#B41717',\r\n      border: '0.5rem #B41717 solid'    },\r\n    ok: {\r\n      margin: '1rem',\r\n      padding: '1rem',\r\n      backgroundColor: '#8CF48A',\r\n      color: 'green',\r\n      border: '0.5rem green solid'\r\n    },\r\n    hide: {\r\n      height: '5.35rem',\r\n      color: 'transparent'\r\n    }\r\n  }\r\n\r\n  let style = styles.hide;\r\n\r\n\r\n  if(props.data.show) {\r\n    if (props.data.error) {\r\n      style = styles.error\r\n    } else {\r\n      style = styles.ok\r\n    }\r\n    setTimeout(()=>{\r\n      props.hideError();\r\n    }, 7000)\r\n  }\r\n\r\n\r\n  return(\r\n    <div style={style}>\r\n      {props.data.message}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorMessage;","import React from \"react\";\r\n\r\nconst NewPerson = (props) => {\r\n  return (\r\n    <form\r\n      onSubmit={props.handleSubmit}\r\n    >\r\n      <div>\r\n        name:\r\n        <input\r\n          name={props.nameName}\r\n          value={props.nameValue}\r\n          onChange={props.nameOnChange}\r\n        />\r\n      </div>\r\n      <div>number:\r\n        <input\r\n          name={props.numName}\r\n          value={props.numValue}\r\n          onChange={props.numOnChange}\r\n        /></div>\r\n      <div>\r\n        <button type=\"submit\" >add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NewPerson;","import axios from \"axios\";\r\n\r\nconst url = '/api/persons'\r\n\r\nconst post = (data) => {\r\n  return axios.post(url, data)\r\n}\r\n\r\nconst get = () => {\r\n  return axios.get(url)\r\n}\r\n\r\nconst deleteLine = (data) => {\r\n  return axios.delete(url+\"/\"+data)\r\n}\r\n\r\nconst put = (num, data) => {\r\n  return axios.put(url+\"/\"+num, data)\r\n}\r\n\r\nexport {post, get, deleteLine, put}","import React, { useState, useEffect } from 'react'\nimport Numbers from './components/Numbers'\nimport Filter from './components/Filter'\nimport ErrorMessage from './components/ErrorMessage'\nimport NewPerson from './components/NewPerson'\nimport {post, get, deleteLine, put} from './components/ServerCall'\n\n\nconst App = () => {\n\n  const [ newFilter, setFilter ] = useState('');\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ newMessage, setMessage] = useState({\n    error: false,\n    show: false,\n    message:''\n  });\n  const [ persons, setPersons] = useState([]);\n\n  useEffect(()=>{\n    get().then(r => {\n      setPersons(r.data)\n    })\n  }, []);\n\n  const hideError = () => {\n    setMessage({\n      error: false,\n      show: false,\n      message:''\n    })\n  }\n\n  const showMessage = (error, message) => {\n    setMessage({error:error, show:true, message:message})\n  }\n\n  const handleChange = (e) => {\n    switch (e.target.name) {\n      case \"name\":\n        setNewName(e.target.value);\n        break;\n      case \"number\":\n        setNewNumber(e.target.value);\n        break;\n      case \"filter\":\n        setFilter(e.target.value);\n        break;\n      default:\n        console.log(\"something went completely wrong\")\n        break;\n    }\n  }\n\n  const addNewPerson = () => {\n    const newPerson = {name:newName, number: newNumber}\n    post(newPerson)\n      .then(r => {\n        const tempArr = Array.from(persons);\n        tempArr.push(newPerson)\n        console.log(tempArr);\n        setPersons(tempArr);\n        setNewName('');\n        setNewNumber('');\n        showMessage(false, `${newName} successfully has been added`)\n      })\n      .catch(e => {\n        console.log(e)\n        showMessage(true, `${newName} can't be added with error:s ${e}`)\n      })\n  }\n\n  const updatePerson = () => {\n    persons.forEach(person => {\n      if (person.name === newName){\n        put(person.id, {name: person.name, number: newNumber})\n          .then(r => {\n            get()\n              .then(r => {\n                setPersons(r.data.data)\n                showMessage(false, `${newName} successfully has been updated`)\n              })\n              .catch(e => {\n                showMessage(true, `${newName} has been updated, but full list couldn't be loaded after with error: ${e}`)\n              })\n          })\n          .catch(e => {\n            showMessage(true, `${newName} can't be updated with error: ${e}`)\n          })\n      }\n    })\n  }\n\n  const deletePerson = (id) => {\n    deleteLine(id).then(r => {\n      get()\n        .then(r => {\n          setPersons(r.data.data)\n          showMessage(false, `${newName} successfully has been removed`)\n        })\n        .catch(e => {\n        })\n    })\n      .catch(e => {\n        showMessage(true, `${newName} can't be removed with error: ${e}`)\n      })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(!(persons.find((person) => {return person.name === newName})||false)){\n      addNewPerson()\n    } else if(window.confirm(`${newName} is already added. Replace the old number?`)) {\n      updatePerson()\n    }\n  }\n\n  const handleDelete = (e) => {\n    const id = e.target.id\n\n    if(window.confirm(\"Are you shure you want to delete this object?\"))deletePerson(id)\n  }\n\n  return (\n    <React.Fragment>\n\n      <ErrorMessage\n        data={newMessage}\n        hideError={hideError}\n      />\n\n\n      <h2>Phonebook</h2>\n\n      <Filter\n        name={\"filter\"}\n        value={newFilter}\n        onChange={handleChange}\n      />\n\n      <h2>add a new</h2>\n\n      <NewPerson\n        nameName={\"name\"}\n        nameValue={newName}\n        nameOnChange={handleChange}\n\n        numName={\"number\"}\n        numValue={newNumber}\n        numOnChange={handleChange}\n\n        handleSubmit={handleSubmit}\n      />\n\n      <h2>Numbers</h2>\n      <Numbers\n        onDelete={handleDelete}\n        personData={persons}\n        newFilter={newFilter}\n      />\n    </React.Fragment>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}